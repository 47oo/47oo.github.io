[{"title":"Maven概念模型(三)","date":"2017-04-09T10:16:32.000Z","path":"2017/04/09/Maven概念模型-三/","text":"概念模型 Maven三大声明周期 Maven有三套相互独立的生命周期. Clean 在进行真正的构建之前进行的一些清理工作. 1mvn clean #对应命令,经常使用 Default 构建的核心部分，编译，测试，打包，部署等等。 1mvn insatll # 对应命令,经常使用 Site 生成项目报告，站点，发布站点。 1mvn site # 很少使用 Maven 仓库布局根据maven坐标定义每个构建在仓库中唯一存储路径 路径为：groupId/ artifactId/version/ artifactId-version.packaging http://search.maven.org 从中央仓库中搜索jar包 仓库分类 本地仓库 默认位置为/.m2/respository/,每个用户只有一个本地仓库 远程仓库 中央仓库 http://repo1.maven.org/maven2 central 私服 是一种特殊的远程仓库，架设在局域网内的仓库 镜像 用来代替中央仓库,速度一般都比中央仓库快。 Mirror，一般都是国内 Maven文件坐标 Maven坐标主要组成 groupId：定义maven的项目，可以用包名 artifactId:定义项目中的一个模块,一般都是工程名 version：版本 packaging：定义打包方式 坐标的作用： 用来唯一标识一个构件，在依赖里面根据坐标来找需要的构件。 Maven依赖 根据maven坐标找依赖的构件 dependency依赖中scope范围 compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效。 test：测试依赖范围。只对于测试classpath有效，只对测试代码有效 provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api，打包的时候这个包不会打进去 runtime:运行时提供。例如:jdbc驱动Compile、runtime打包会打进去，test、provided打包不会打进去传递性依赖原则： 依赖冲突解决： 路径最近者优先 C-&gt;B-&gt;A，C依赖B，B依赖A，会先用B的jar包 路径相同，第一声明者优先：C-&gt;B,C-&gt;A，必须看B，A在C中哪一个先声明 Maven的聚合和继承主要是可以起到公共配置文件的抽取作用,jar包的统一管理 dependencyManagement中定义的依赖子module不会共享 dependencies中定义的依赖子module可以共享 jar包的统一管理，把jar抽取到parent中 继承关系继承关系不可以循环,比如a继承b，b继承c，c继承d，d继承a 这样是错误的12345678910&lt;!--定义父项目--&gt; &lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.codehaus.hanhao&lt;/groupId&gt; &lt;artifactId&gt;my-parent&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;/project&gt; &lt;!--packaging 类型，需要pom用于parent和合成多个项目。我们需要增加相应的值给父pom，用于子项目继承。--&gt; 12345678910111213&lt;!--子项目配置--&gt;&lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.codehaus.hanhao&lt;/groupId&gt; &lt;artifactId&gt;my-parent&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;relativePath&gt;../my-parent&lt;/relativePath&gt; &lt;/parent&gt; &lt;artifactId&gt;my-project&lt;/artifactId&gt; &lt;/project&gt;&lt;!--relativePath可以不需要，但是用于指明parent的目录，用于快速查询。 --&gt; 聚合关系123456789101112&lt;!--合成（或者多个模块） 一个项目有多个模块， 也叫做多重模块，或者合成项目。 --&gt;&lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;my-parent&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;modules&gt; &lt;module&gt;my-project1&lt;module&gt; &lt;module&gt;my-project2&lt;module&gt; &lt;/modules&gt; &lt;/project&gt;","tags":[{"name":"maven","slug":"maven","permalink":"http://yoursite.com/tags/maven/"}]},{"title":"Maven使用(二)","date":"2017-04-09T09:56:42.000Z","path":"2017/04/09/Maven使用-二/","text":"Maven的简单使用Maven项目的目录约定 所谓的目录约定只不过是一种习惯，一种默认目录配置,可以做出个性化更改。 手动创建Maven项目,使用Mavenpom.xml文件简单配置 1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\"?&gt;&lt;!--最外层是project标签,见名知意--&gt;&lt;project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;&lt;!--所有的Maven项目都必须配置这四个配置项--&gt; &lt;!--modelVersion 描述这个POM文件是遵从哪个版本的项目描述符--&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--groupId指的是项目名的项目组，默认就是包名--&gt; &lt;groupId&gt;com.group.hanhao&lt;/groupId&gt; &lt;!--artifactId指的是项目中的某一个模块，默认命名方式是\"项目名-模块名\"--&gt; &lt;artifactId&gt;mavenProjeck&lt;/artifactId&gt; &lt;!--version指的是版本，这里使用的是Maven的快照版本--&gt; &lt;version&gt;SNAPSHOT-0.0.1&lt;/version&gt; &lt;!--项目打包的类型，可以使jar、war、rar、ear、pom，默认是jar--&gt; &lt;packaging&gt;jar/war&lt;/packaging&gt;&lt;!--下面这一块是非必需品--&gt;&lt;!--依赖文件配置--&gt; &lt;dependencies&gt; &lt;!--单个依赖项--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;!--使用范围--&gt; &lt;scope&gt;compile/test/provided/runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--但是却是最经常使用的东东--&gt;&lt;/project&gt; Maven 常用命令需要在有pom.xml文件的地方使用12345mvn compile #用于对源文件进行编译mvn test #用于执行test(默认文件夹)的文件,测试命令mvn package # 编译、测试、打包。但是并没有把包同步到仓库mvn install # 编译、测试、打包。并且把包同步到仓库mvn clean #清空默认目录target下的所有文件(可配置成自己喜欢的目录)","tags":[{"name":"maven","slug":"maven","permalink":"http://yoursite.com/tags/maven/"}]},{"title":"Maven介绍(一)","date":"2017-04-09T09:13:19.000Z","path":"2017/04/09/Maven介绍-一/","text":"Maven的基本概念 Maven是一个跨平台的项目管理工具。主要服务于基于Java平台的项目的项目构建，依赖管理和项目信息管理。 项目构建项目构建过程包括【清理项目】→【编译项目】→【测试项目】→【生成测试报告】→【打包项目】→【部署项目】这几个步骤，这六个步骤就是一个项目的完整构建过程。 理想的项目构建是高度自动化，跨平台，可重用的组件，标准化的，使用maven就可以帮我们完成上述所说的项目构建过程。 使用Maven的优势Maven中使用约定，约定java源代码代码必须放在哪个目录下，编译好的java代码又必须放到哪个目录下，这些目录都有明确的约定。 Maven的每一个动作都拥有一个生命周期，例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程 只需要定义一个pom.xml,然后把源码放到默认的目录，Maven帮我们处理其他事情 使用Maven可以进行项目高度自动化构建，依赖管理(这是使用Maven最大的好处)，仓库管理。","tags":[{"name":"maven","slug":"maven","permalink":"http://yoursite.com/tags/maven/"}]},{"title":"Hello World","date":"2017-04-02T04:37:37.324Z","path":"2017/04/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]